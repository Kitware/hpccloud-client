(function(e,t){"object"===typeof exports&&"object"===typeof module?module.exports=t():"function"===typeof define&&define.amd?define([],t):"object"===typeof exports?exports["PyFr"]=t():e["PyFr"]=t()})("undefined"!==typeof self?self:this,function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s="fae3")}({f6fd:function(e,t){(function(e){var t="currentScript",n=e.getElementsByTagName("script");t in e||Object.defineProperty(e,t,{get:function(){try{throw new Error}catch(i){var e,t=(/.*at [^\(]*\((.*):.+:.+\)$/gi.exec(i.stack)||[!1])[1];for(e in n)if(n[e].src==t||"interactive"==n[e].readyState)return n[e];return null}}})})(document)},fae3:function(e,t,n){"use strict";var i;(n.r(t),"undefined"!==typeof window)&&(n("f6fd"),(i=window.document.currentScript)&&(i=i.src.match(/(.+\/)[^\/]+\.js(\?.*)?$/))&&(n.p=i[1]));var r=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticStyle:{padding:"0 30px"}},[n("h2",[e._v("Introduction")]),n("p",[e._v("\n    PyFR is an open-source Python based framework for solving\n    advection-diffusion type problems on streaming architectures using the\n    Flux Reconstruction approach of Huynh. The framework is designed to solve\n    a range of governing systems on mixed unstructured grids containing\n    various element types. It is also designed to target a range of hardware\n    platforms via use of an in-built domain specific language derived from the\n    Mako templating engine. The current release (PyFR 1.2.0) has the following\n    capabilities:\n  ")]),n("ul",[n("li",[e._v("Governing Equations - Euler, Navier Stokes")]),n("li",[e._v("Dimensionality - 2D, 3D")]),n("li",[e._v("\n      Element Types - Triangles, Quadrilaterals, Hexahedra, Prisms,\n      Tetrahedra, Pyramids\n    ")]),n("li",[e._v("\n      Platforms - CPU Clusters, Nvidia GPU Clusters, AMD GPU Clusters\n    ")]),n("li",[e._v("Spatial Discretisation - High-Order Flux Reconstruction")]),n("li",[e._v("Temporal Discretisation - Explicit Runge-Kutta")]),n("li",[e._v("Precision - Single, Double")]),n("li",[e._v("Mesh Files Imported - Gmsh (.msh)")]),n("li",[e._v("Solution Files Exported - Unstructured VTK (.vtu, .pvtu)")])]),n("p",[n("a",{staticStyle:{"text-decoration":"underline"},attrs:{href:"http://www.pyfr.org/",target:"_blank"}},[e._v("Find out more")])])])}];function a(e,t,n,i,r,o,a,l){var u,s="function"===typeof e?e.options:e;if(t&&(s.render=t,s.staticRenderFns=n,s._compiled=!0),i&&(s.functional=!0),o&&(s._scopeId="data-v-"+o),a?(u=function(e){e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,e||"undefined"===typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),r&&r.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(a)},s._ssrRegister=u):r&&(u=l?function(){r.call(this,this.$root.$options.shadowRoot)}:r),u)if(s.functional){s._injectStyles=u;var c=s.render;s.render=function(e,t){return u.call(t),c(e,t)}}else{var p=s.beforeCreate;s.beforeCreate=p?[].concat(p,u):[u]}return{exports:e,options:s}}var l={},u=a(l,r,o,!1,null,null,null),s=u.exports,c=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("label",[e._v("Input step...")]),n("hpc-simput",{attrs:{type:"pyfr"}})],1)},p=[],d={},f=a(d,c,p,!1,null,null,null),y=f.exports,m=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._v("Simulation start step...")])},v=[],_={},h=a(_,m,v,!1,null,null,null),b=h.exports,g=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._v("Simulation View step...")])},w=[],P={},S=a(P,g,w,!1,null,null,null),x=S.exports,C=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._v("Visualization start step...")])},F=[],k={},E=a(k,C,F,!1,null,null,null),O=E.exports,T=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._v("Visualization view step...")])},V=[],I={},R=a(I,T,V,!1,null,null,null),j=R.exports,$={name:"PyFr",icon:"mdi-weather-windy",simput:{type:"pyfr",urls:["/simput/pyfr.js"]},requiredAttachments:{project:["mesh"],simulation:[]},components:{},config:{cluster:{"config.paraview.installDir":{type:"text",label:"ParaView Directory",description:"Path to the home directory of ParaView."},"config.pyfr.cuda":{type:"bool",label:"Cuda enabled",description:"Check if the cluster is able to run Cuda for PyFR"},"config.pyfr.opencl":{type:"profile",label:"OpenCL configurations",description:"Set of options that can be used with the OpenCL backend for PyFR",profile:{"platform-id":{type:"text",label:"Platform ID",description:"OpenCL backend for PyFR: platform-id"},"device-type":{type:"enum",label:"Device type",values:["all","cpu","gpu","accelerator"],description:"OpenCL backend for PyFR: platform-id"},"device-id":{type:"text",label:"Device ID",description:"OpenCL backend for PyFR: device-id"}}},"config.pyfr.openmp":{type:"profile",label:"OpenMP configurations",description:"Set of options that can be used with the OpenMP backend for PyFR",profile:{cc:{type:"text",label:"Compiler",description:"C Compiler"},cflags:{type:"text",label:"Flags",description:"Additional C compiler flags"},cblas:{type:"text",label:"BLAS library",description:"Path to shared C BLAS library"},"cblas-type":{type:"text",label:"BLAS Type",description:"Type of BLAS library"}}}}},steps:{_order:["Introduction","Input","Simulation","Visualization"],_disabled:["Visualization"],_initial_state:{Introduction:{type:"input",metadata:{alwaysAvailable:!0}},Input:{type:"input",metadata:{}},Simulation:{type:"output",metadata:{}},Visualization:{type:"output",metadata:{}}},Introduction:{default:s},Input:{default:y},Simulation:{default:b,run:x},Visualization:{default:O,run:j}},taskFlows:{Simulation:"hpccloud.taskflow.pyfr.PyFrTaskFlow",Visualization:"hpccloud.taskflow.paraview.visualizer.ParaViewTaskFlow"},primaryJobs:{Simulation:"pyfr_run",Visualization:"paraview"},labels:{Introduction:{default:"Introduction"},Input:{default:"Input definition"},Simulation:{default:"Simulation",run:"Simulation (running)"},Visualization:{default:"Visualization",run:"Visualization (running)"}}};window.HPCWorkflow&&window.HPCWorkflow.register($)}})});
//# sourceMappingURL=PyFr.umd.min.js.map